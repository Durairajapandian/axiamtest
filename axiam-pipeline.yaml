trigger:
  branches:
    include:
      - dev

pool:
  name: 'Default'

variables:
  solution: 'main/Project-file/*.sln' 
  buildConfiguration: 'Release'
  artifactName: 'drop'

stages:

  # ------------------- Build Stage -------------------
  - stage: Build
    displayName: 'Build .NET Framework WebApp'
    jobs:
      - job: BuildJob
        displayName: 'Build Job'
        steps:
          - task: NuGetToolInstaller@1

          - task: NuGetCommand@2
            inputs:
              restoreSolution: '$(solution)'

          # Direct MSBuild command
          - powershell: |
              Write-Host "Starting MSBuild..."
              $msbuildPath = "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\MSBuild\Current\Bin\MSBuild.exe"
              if (Test-Path $msbuildPath) {
                  & $msbuildPath "$(solution)" `
                    /p:Configuration=$(buildConfiguration) `
                    /p:DeployOnBuild=true `
                    /p:WebPublishMethod=FileSystem `
                    /p:OutDir="$(Build.ArtifactStagingDirectory)\WebApp\\"
              } else {
                  throw "MSBuild not found at $msbuildPath. Please install Build Tools on the VM."
              }
            displayName: 'Build with MSBuild'

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)\WebApp'
              ArtifactName: '$(artifactName)'
              publishLocation: 'Container'

  # ------------------- Deploy Stage -------------------
  - stage: Deploy
    displayName: 'Deploy to Azure VM IIS'
    dependsOn: Build
    jobs:
      - deployment: DeployToVM
        displayName: 'Deploy to IIS'
        pool:
          name: 'Lexitas-VM-IIS'  # agent pool tied to your deployment group
        strategy:
          runOnce:
            deploy:
              steps:
                # Download build artifacts
                - task: DownloadPipelineArtifact@2
                  inputs:
                    artifactName: '$(artifactName)'
                    targetPath: '$(System.DefaultWorkingDirectory)\WebApp'

                # Backup existing IIS website
                - powershell: |
                    $timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
                    $sourcePath = "C:\inetpub\wwwroot\MyWebApp"
                    $backupPath = "C:\inetpub\wwwroot\Backups\MyWebApp_$timestamp"
                    if (Test-Path $sourcePath) {
                        New-Item -ItemType Directory -Force -Path $backupPath
                        Copy-Item -Path "$sourcePath\*" -Destination $backupPath -Recurse
                        Write-Host "Backup completed: $backupPath"
                    } else {
                        Write-Host "No existing app found to backup."
                    }
                  displayName: 'Backup Existing Website'

                # Deploy new build
                - powershell: |
                    $source = "$(System.DefaultWorkingDirectory)\WebApp\"
                    $destination = "C:\inetpub\wwwroot\MyWebApp"
                    if (-Not (Test-Path $destination)) {
                        New-Item -ItemType Directory -Force -Path $destination
                    }
                    Remove-Item "$destination\*" -Recurse -Force -ErrorAction SilentlyContinue
                    Copy-Item -Path "$source\*" -Destination $destination -Recurse -Force
                  displayName: 'Deploy New Build to IIS'

                # Restart only your App Pool (safer than full IIS reset)
                - powershell: |
                    Restart-WebAppPool -Name "MyWebAppPool"
                  displayName: 'Restart IIS App Pool'
