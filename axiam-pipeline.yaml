trigger:
  branches:
    include:
      - dev

pool:
  name: 'Default'

variables:
  solution: 'main/Project-file/*.sln'
  buildConfiguration: 'Release'
  artifactName: 'drop'

stages:

# ------------------- Build Stage -------------------
- stage: Build
  displayName: 'Build .NET Framework WebApp'
  jobs:
    - job: BuildJob
      displayName: 'Build Job'
      steps:
        - task: NuGetToolInstaller@1

        - task: NuGetCommand@2
          inputs:
            restoreSolution: '$(solution)'

        # Auto-detect MSBuild instead of hardcoding
        - powershell: |
            Write-Host "Locating MSBuild..."
            $msbuild = (Get-Command msbuild.exe -ErrorAction SilentlyContinue).Source
            if (-not $msbuild) {
                $vsPath = &"${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" `
                  -latest -products * -requires Microsoft.Component.MSBuild -find MSBuild\**\Bin\MSBuild.exe
                if ($vsPath) {
                    $msbuild = $vsPath | Select-Object -First 1
                }
            }
            if (-not $msbuild) {
                throw "MSBuild not found. Please install Visual Studio Build Tools or ensure msbuild.exe is in PATH."
            }
            Write-Host "Using MSBuild at: $msbuild"
            & $msbuild "$(solution)" `
              /p:Configuration=$(buildConfiguration) `
              /p:DeployOnBuild=true `
              /p:WebPublishMethod=FileSystem `
              /p:OutDir="$(Build.ArtifactStagingDirectory)\WebApp\\"
          displayName: 'Build with auto-detected MSBuild'

        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)\WebApp'
            ArtifactName: '$(artifactName)'
            publishLocation: 'Container'

# ------------------- Deploy Stage -------------------
- stage: Deploy
  displayName: 'Deploy to Azure VM IIS'
  dependsOn: Build
  jobs:
    - deployment: DeployToVM
      displayName: 'Deploy to IIS'
      environment: 'Lexitas-IIS-Dev'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: DownloadPipelineArtifact@2
                inputs:
                  artifactName: '$(artifactName)'
                  targetPath: '$(System.DefaultWorkingDirectory)\WebApp'

              - powershell: |
                  $timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
                  $sourcePath = "C:\inetpub\wwwroot\MyWebApp"
                  $backupPath = "C:\inetpub\wwwroot\Backups\MyWebApp_$timestamp"
                  if (Test-Path $sourcePath) {
                      New-Item -ItemType Directory -Force -Path $backupPath
                      Copy-Item -Path "$sourcePath\*" -Destination $backupPath -Recurse
                      Write-Host "Backup completed: $backupPath"
                  } else {
                      Write-Host "No existing app found to backup."
                  }
                displayName: 'Backup Existing Website'

              - powershell: |
                  $source = "$(System.DefaultWorkingDirectory)\WebApp\"
                  $destination = "C:\inetpub\wwwroot\MyWebApp"
                  if (-Not (Test-Path $destination)) {
                      New-Item -ItemType Directory -Force -Path $destination
                  }
                  Remove-Item "$destination\*" -Recurse -Force -ErrorAction SilentlyContinue
                  Copy-Item -Path "$source\*" -Destination $destination -Recurse -Force
                displayName: 'Deploy New Build to IIS'

              - powershell: |
                  Restart-WebAppPool -Name "MyWebAppPool"
                displayName: 'Restart IIS App Pool'
